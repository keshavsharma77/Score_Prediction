# -*- coding: utf-8 -*-
"""Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QonZA0DruMaKEeJdaaIqfgmI0RNAJbL6

# Name: Keshav Sharma

# Task 1: To predict the percentage of a student based on the number of study hours.

### **Simple Linear Regression**
In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours the student studies.
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline
print('Libraries imported successfully')

"""Reading the dataset"""

url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data imported successfully")
data.head(10)

#To check if any missing value
data.isnull().sum()

data.describe()

data.corr()

"""**Data Visualization**"""

# Plotting the distribution of scores
data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""**Preparing the dataset**"""

x = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values

"""**Training and Test dataset**"""

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(x, y, 
                            test_size=0.2, random_state=0)

"""**Training model**"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training is completed.")

"""Plotting the regression line and the Test data"""

# Plotting the regression line
line = regressor.coef_*x + regressor.intercept_

# Plotting for the test data
plt.scatter(x, y)
plt.plot(x, line);
plt.show()

"""**Predicting the data**"""

print(X_test) # Test data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
data

print("Training Score: ", regressor.score(X_train,y_train))
print("Testing Score: ", regressor.score(X_test,y_test))

#Plotting the bar chart to depict the actual and predicted value
data.plot(kind= 'bar', figsize = (7,7))
plt.show()

"""**Predicting for a particular value of hours**"""

# You can also test with your own data
hours = 9.25
test = np.array([hours])
test = test.reshape(-1, 1)
own_pred = regressor.predict(test)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""**Evaluating the model**"""

from sklearn import metrics
print('Mean Absolute Error: ',metrics.mean_absolute_error(y_test,y_pred))
print('Mean Squared Error: ',metrics.mean_squared_error(y_test,y_pred))
print('Root Mean Squared Error: ',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))
print('Explained Variance Score: ',metrics.explained_variance_score(y_test,y_pred))
print('R_squared: ',metrics.r2_score(y_test,y_pred))

"""Above step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset."""